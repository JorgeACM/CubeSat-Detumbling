% Function: dx = attitude_model( t, x )
% 
% AGNC 2023/2024

function dx = attitude_model( t, x )
global torque

%Define the external magnetic field in the orbit frame
Bo = [0.3/10000 0.3/10000 0.3/10000]';


% Define the moment of intertial matrix for the satellite
I = [1.67e-3 0 0;
     0 1.67e-3 0;
     0 0 1.67e-3];

% Define the state space parameters
q(1) = x(1);
q(2) = x(2);
q(3) = x(3);
q(4) = x(4);
w(1) = x(5);
w(2) = x(6);
w(3) = x(7);
h(1) = x(8);
h(2) = x(9);
h(3) = x(10);

% % &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

% % Adding gaussian noise to External Magnetic Field
% sigma_noise = 35e-9;
% Bo = Bo + randn(size(Bo), "like", Bo)*sigma_noise;

% noise=40e-9;
% snr = 10*log10(norm(Bo(1))/noise); % SNR in dB
% Bo = awgn(Bo,snr,"measured"); %Signal with noise

% % Angular momentum with noise
% h = h+awgn(h,10,"measured");

% % &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

scale = sqrt(q(1)^2 + q(2)^2 + q(3)^2 + q(4)^2);
q(1) = q(1)/scale;
q(2) = q(2)/scale;
q(3) = q(3)/scale;
q(4) = q(4)/scale;

% Define the rotation matrix to transform from orbit to body frame
Aob = [q(1)^2 - q(2)^2 - q(3)^2 + q(4)^2 2*(q(1)*q(2) + q(4)*q(3)) 2*(q(1)*q(3) - q(4)*q(2));
       2*(q(1)*q(2) - q(4)*q(3)) -q(1)^2 + q(2)^2 - q(3)^2 + q(4)^2 2*(q(2)*q(3) + q(4)*q(1));
       2*(q(1)*q(3) + q(4)*q(2)) 2*(q(2)*q(3) - q(4)*q(1)) -q(1)^2 - q(2)^2 + q(3)^2 + q(4)^2];
   
% Calculate the magnetic field in body frame
Bb = Aob*Bo;

% Get the control inputs
[M T] = control_algorithm(t, q, w, h, Bb);

% Place constraints on the control inputs
for i=[1:3]
    if( M(i) > 1 )
        M(i) = 1;
    end
    if( M(i) < -1 )
        M(i) = -1;
    end
end
for i=[1:3]
    if( T(i) > 0.001 )
        T(i) = 0.001;
    end
    if( T(i) < -0.001 )
        T(i) = -0.001;
    end
    if( h(i) > 0.1 && T(i) > 0 )
        T(i) = 0;
    end
    if( h(i) < -0.1 && T(i) < 0 )
        T(i) = 0;
    end
end


% Calculate the torque generated by the magnetorquer
Nmt = cross(M, Bb);

% Calculate the rotation rates in the orbital frame
% wo = inv(Aob)*w'; 
n = sqrt(3.98e5/7000^3); % orbital angular velocity
wo = w' - Aob*[0;-n;0];

% Solve the governing state space equations
w_dot = inv(I)*(Nmt - T - cross(w', (I*w' + h')));

q_dot = 0.5*[   0    wo(3)   -wo(2)   wo(1);
             -wo(3)  0        wo(1)   wo(2);
              wo(2) -wo(1)    0       wo(3);
             -wo(1) -wo(2)   -wo(3)    0           ]*q';
h_dot = T';

% % Concat torque to plot it in solver.m
% torque = cat(1, torque,[t,T(1), T(2), T(3)] );

% Return the result to matlab
dx(1) = q_dot(1);
dx(2) = q_dot(2);
dx(3) = q_dot(3);
dx(4) = q_dot(4);
dx(5) = w_dot(1);
dx(6) = w_dot(2);
dx(7) = w_dot(3);
dx(8) = h_dot(1);
dx(9) = h_dot(2);
dx(10) = h_dot(3);
dx = dx';